apply plugin: 'java'
apply plugin: 'maven-publish'

group = 'jp.sourceforge.hotchpotch'
version = '0.0.2-SNAPSHOT'

apply from: 'gradle/misc.gradle'
apply from: 'gradle/eclipse.gradle'

// gradleとIDEAで出力先が被らないようにgradle側を変更したつもりだったが、IDEAはgradle設定を見て同じ箇所へ出力するようで、結局被ってしまう。
buildDir = 'build-gradle'
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

sourceSets {
    test {
        /*
         * classesとresourcesの出力先を同じディレクトリにした。
         *
         * diconなどがclassとは別のbuildDir/resources/testへ出力されると、
         * S2のResourceUtil.getBuildDir(Class)でclassファイルの位置からdiconファイルを取得する仕組みが機能しないため。
         * この設定をしない場合の出力先は次のようになる。
         * buildDir/classes/test
         * buildDir/resources/test
         */
        output.resourcesDir = output.classesDir
    }
}

test {
    exclude 'org/seasar/framework/unit/Seasar2Test**'
}

repositories {
    mavenCentral()
    maven { url 'http://maven.seasar.org/maven2' }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.seasar.container:s2-tiger:2.4.47'
    compile 'junit:junit:4.11'

    testCompile 'org.slf4j:jcl-over-slf4j:1.7.7'
    testCompile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'ch.qos.logback:logback-core:1.1.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    testCompile 'org.seasar.container:s2-framework:2.4.47:tests'
    testCompile 'org.seasar.container:s2-extension:2.4.47:tests'
    testCompile 'hsqldb:hsqldb:1.8.0.1'

    compile 'org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1', {
        ext.mavenScope = 'provided'
    }
    testCompile 'org.apache.geronimo.specs:geronimo-ejb_3.0_spec:1.0'
    testCompile 'org.apache.geronimo.specs:geronimo-annotation_1.0_spec:1.0'
    testCompile 'org.apache.geronimo.specs:geronimo-interceptor_3.0_spec:1.0'
    testCompile 'org.apache.geronimo.specs:geronimo-jpa_3.0_spec:1.0'
    testCompile 'org.apache.geronimo.specs:geronimo-j2ee_1.4_spec:1.0'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom.withXml { /* org.gradle.api.XmlProvider */ XmlProvider xml ->
                // groovy.util.Node
                Node projectNode = xml.asNode()
                Node dependencies = projectNode.dependencies[0]
                // dependenciesを作りなおす
                dependencies.children().clear()
                def dummyNode = dependencies.appendNode('dummy')
                dummyNode + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    NodeBuilder builder1 = delegate
                    project.configurations.each { Configuration config ->
                        /* org.gradle.api.artifacts.Configuration */
                        config.dependencies.each { Dependency dependency ->
                            builder1.dependency {
                                NodeBuilder builder2 = delegate
                                resolveStrategy = Closure.DELEGATE_FIRST
                                builder2.groupId dependency.group
                                builder2.artifactId dependency.name
                                builder2.version dependency.version
                                def scope = toMavenScope(config, dependency)
                                if ('compile' != scope) {
                                    builder2.scope scope
                                }
                                //println '---- ' + dependency
                                dependency.artifacts.each { DependencyArtifact artifact ->
                                    if (artifact.classifier) {
                                        builder2.type toMavenClassifier(artifact)
                                    }
                                }
                            }
                        }
                    }
                }
                dependencies.remove(dummyNode)
            }
        }
    }
    repositories {
        def repo
        // ./gradlew publish -Ppublish_to=/path/to/repo/release'
        if (project.hasProperty('publish_to')) {
            repo = project.'publish_to'
        } else {
            repo = "file:${rootDir}/../repo"
        }
        if (project.hasProperty('repo')) {
            repo = project.'repo'
        }
        maven {
            url repo
        }
    }
}

def toMavenScope(Configuration config, Dependency dependency) {
    if (dependency.ext.has('mavenScope')) {
        return dependency.mavenScope
    }
    switch (config.name) {
        case 'testCompile':
            return 'test'
    }
    return config.name
}

def toMavenClassifier(DependencyArtifact artifact) {
    if ('tests' == artifact.classifier) {
        return 'test-jar'
    }
    return artifact.classifier
}
