task wrapper(type: Wrapper) {
    gradleVersion = 2.1
}

eclipse {
    pathVariables "GRADLE_USER_HOME": gradle.gradleUserHomeDir
}

tasks.eclipseJdt {
    assert "org.eclipse.jdt.core.prefs" == outputFile.name
    ext.originalOutputFile = outputFile
    outputFile = (outputFile.absolutePath + ".tmp") as File
}
tasks.eclipseJdt << {
    assert "org.eclipse.jdt.core.prefs.tmp" == outputFile.name
    assert "org.eclipse.jdt.core.prefs" == ext.originalOutputFile.name
    List lines = outputFile.readLines("UTF-8")
    Collections.sort(lines)
    ext.originalOutputFile.withWriter("UTF-8") { writer ->
        lines.each { line ->
            writer << line
            writer << "\r\n"
        }
    }
    assert outputFile.delete()
}

task prepareDirectories(description: 'create source directories') << {
    project.sourceSets.each { sourceSet ->
        sourceSet.allSource.srcDirs.each { dir ->
            _mkdir(dir)
            def packageDir = new File(dir, project.group.replace(".", "/"))
            _mkdir(packageDir)
        }
    }

    if (project.plugins.hasPlugin("war")) {
        _mkdir(webAppDir)
    }
}

def _mkdir(dir) {
    if (!dir.exists()) {
        assert dir.mkdirs()
        logger.info("mkdir: {}", dir)
    } else {
        logger.info("already exist: {}", dir)
    }
}

def sourceEncoding = "UTF-8"
tasks.withType(SourceTask).each {
    // ":compileGroovy", ":compileJava", "compileTestGroovy", ":compileTestJava", ":groovydoc", ":javadoc"
    def p1 = 'options'
    def p2 = 'encoding'
    if (it.hasProperty(p1)) {
        if (it[p1].hasProperty(p2)) {
            logger.info "${it} has options.encoding property"
            it[p1][p2] = sourceEncoding
        } else {
            logger.info "${it} has no ${p2} property"
        }
    } else {
        logger.info "${it} has no ${p1} property"
    }
}
